#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <DHT.h>

// Th√¥ng tin Wi-Fi
const char* ssid = "realme 9";
const char* password = "1234568999";

// ƒê·ªãa ch·ªâ server
const char* serverUrl = "http://192.168.234.127:3005/api/weather";
const int stationId = 6;

// C·∫£m bi·∫øn DHT22
#define PIN_DHT 4
#define DHTTYPE DHT22
DHT dht(PIN_DHT, DHTTYPE);

// C·∫£m bi·∫øn m∆∞a v√† gi√≥
#define PIN_HALL_RAIN 16
#define PIN_HALL_WIND 14
#define PIN_RAIN_DETECTOR 17

// H·∫±ng s·ªë
const float rainPerTip_mm = 2.73;
const float windCircumference_m = 0.628;

// Bi·∫øn to√†n c·ª•c
volatile unsigned long rainCount = 0;
volatile unsigned long windCount = 0;
float lastTemperature = -999;
float lastHumidity = -999;
float lastRainAmount = -1;
float lastWindSpeed = -1;
unsigned long lastRainCalcTime = 0;
unsigned long lastSerialDisplayTime = 0;
const unsigned long rainInterval = 5 * 60 * 1000; // 5 ph√∫t
const unsigned long serialDisplayInterval = 5000; // 5 gi√¢y

// ƒê·ªçc tr·∫°ng th√°i c·∫£m bi·∫øn MH-RD v·ªõi ch·ªëng nhi·ªÖu
bool readRainSensor() {
  const int numReadings = 5;
  int rainCount = 0;
  for (int i = 0; i < numReadings; i++) {
    if (digitalRead(PIN_RAIN_DETECTOR) == LOW) {
      rainCount++;
    }
    delay(10);
  }
  return (rainCount >= numReadings / 2);
}

// ƒê·∫£m b·∫£o k·∫øt n·ªëi WiFi
void ensureWiFiConnected() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("M·∫•t k·∫øt n·ªëi WiFi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) { // TƒÉng s·ªë l·∫ßn th·ª≠ l√™n 20
      delay(1000); // TƒÉng th·ªùi gian ch·ªù l√™n 1 gi√¢y
      Serial.print(".");
      attempts++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nK·∫øt n·ªëi WiFi th√†nh c√¥ng!");
      Serial.println("IP: " + WiFi.localIP().toString());
    } else {
      Serial.println("\nKh√¥ng th·ªÉ k·∫øt n·ªëi WiFi!");
    }
  }
}

// H√†m ng·∫Øt cho c·∫£m bi·∫øn m∆∞a
void IRAM_ATTR onRainTip() {
  static unsigned long lastInterruptTime = 0;
  unsigned long interruptTime = millis();
  if (interruptTime - lastInterruptTime > 500) { // Ch·ªëng nhi·ªÖu
    rainCount++;
    lastInterruptTime = interruptTime;
  }
}

// H√†m ng·∫Øt cho c·∫£m bi·∫øn gi√≥
void IRAM_ATTR onWindSpin() {
  static unsigned long lastInterruptTime = 0;
  unsigned long interruptTime = millis();
  if (interruptTime - lastInterruptTime > 500) { // Ch·ªëng nhi·ªÖu
    windCount++;
    lastInterruptTime = interruptTime;
  }
}

// G·ª≠i d·ªØ li·ªáu l√™n server
void sendDataToServer(float temperature, float humidity, float rainAmount, float windSpeed) {
  // Ki·ªÉm tra gi√° tr·ªã kh√¥ng h·ª£p l·ªá
  if (isnan(temperature)) {
    temperature = lastTemperature;
    Serial.println("L·ªói ƒë·ªçc nhi·ªát ƒë·ªô, s·ª≠ d·ª•ng gi√° tr·ªã tr∆∞·ªõc: " + String(temperature));
  }
  if (isnan(humidity)) {
    humidity = lastHumidity;
    Serial.println("L·ªói ƒë·ªçc ƒë·ªô ·∫©m, s·ª≠ d·ª•ng gi√° tr·ªã tr∆∞·ªõc: " + String(humidity));
  }
  if (rainAmount < 0) {
    rainAmount = 0;
  }
  if (windSpeed < 0) {
    windSpeed = 0;
  }

  // Ki·ªÉm tra thay ƒë·ªïi d·ªØ li·ªáu
  bool shouldSend = (
    abs(temperature - lastTemperature) > 0.5 || // Ng∆∞·ª°ng thay ƒë·ªïi nhi·ªát ƒë·ªô
    abs(humidity - lastHumidity) > 1.0 ||       // Ng∆∞·ª°ng thay ƒë·ªïi ƒë·ªô ·∫©m
    abs(rainAmount - lastRainAmount) > 0.1 ||   // Ng∆∞·ª°ng thay ƒë·ªïi l∆∞·ª£ng m∆∞a
    abs(windSpeed - lastWindSpeed) > 0.1       // Ng∆∞·ª°ng thay ƒë·ªïi t·ªëc ƒë·ªô gi√≥
  );

  if (!shouldSend) {
    Serial.println("D·ªØ li·ªáu kh√¥ng thay ƒë·ªïi nhi·ªÅu ‚Üí Kh√¥ng g·ª≠i");
    return;
  }

  ensureWiFiConnected();
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    StaticJsonDocument<512> jsonDoc;
    JsonArray dataArray = jsonDoc.to<JsonArray>();

    // Th√™m b·∫£n ghi cho nhi·ªát ƒë·ªô
    JsonObject tempData = dataArray.createNestedObject();
    tempData["station_id"] = stationId;
    tempData["parameter_type"] = "temperature";
    tempData["value"] = round(temperature * 100) / 100.0; // L√†m tr√≤n 2 ch·ªØ s·ªë th·∫≠p ph√¢n

    // Th√™m b·∫£n ghi cho ƒë·ªô ·∫©m
    JsonObject humidityData = dataArray.createNestedObject();
    humidityData["station_id"] = stationId;
    humidityData["parameter_type"] = "humidity";
    humidityData["value"] = round(humidity * 100) / 100.0;

    // Th√™m b·∫£n ghi cho l∆∞·ª£ng m∆∞a
    JsonObject rainData = dataArray.createNestedObject();
    rainData["station_id"] = stationId;
    rainData["parameter_type"] = "rainfall";
    rainData["value"] = round(rainAmount * 100) / 100.0;

    // Th√™m b·∫£n ghi cho t·ªëc ƒë·ªô gi√≥
    JsonObject windData = dataArray.createNestedObject();
    windData["station_id"] = stationId;
    windData["parameter_type"] = "wind";
    windData["value"] = round(windSpeed * 100) / 100.0;

    String jsonStr;
    serializeJson(jsonDoc, jsonStr);

    Serial.println("G·ª≠i JSON: " + jsonStr); // Log ƒë·ªÉ debug
    int httpResponseCode = http.POST(jsonStr);
    if (httpResponseCode > 0) {
      Serial.printf("G·ª≠i d·ªØ li·ªáu th√†nh c√¥ng, m√£: %d\n", httpResponseCode);
      String response = http.getString();
      Serial.println("Ph·∫£n h·ªìi t·ª´ server: " + response);
      // C·∫≠p nh·∫≠t gi√° tr·ªã cu·ªëi c√πng
      lastTemperature = temperature;
      lastHumidity = humidity;
      lastRainAmount = rainAmount;
      lastWindSpeed = windSpeed;
    } else {
      Serial.printf("L·ªói khi g·ª≠i d·ªØ li·ªáu: %s\n", http.errorToString(httpResponseCode).c_str());
    }

    http.end();
  } else {
    Serial.println("WiFi ch∆∞a k·∫øt n·ªëi");
  }
}

void setup() {
  Serial.begin(115200);
  dht.begin();

  // C·∫•u h√¨nh c√°c ch√¢n
  pinMode(PIN_HALL_RAIN, INPUT_PULLUP);
  pinMode(PIN_HALL_WIND, INPUT_PULLUP);
  pinMode(PIN_RAIN_DETECTOR, INPUT);

  // G·∫Øn h√†m ng·∫Øt
  attachInterrupt(digitalPinToInterrupt(PIN_HALL_RAIN), onRainTip, FALLING);
  attachInterrupt(digitalPinToInterrupt(PIN_HALL_WIND), onWindSpin, FALLING);

  // K·∫øt n·ªëi WiFi
  Serial.print("ƒêang k·∫øt n·ªëi WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nK·∫øt n·ªëi WiFi th√†nh c√¥ng!");
  Serial.println("IP: " + WiFi.localIP().toString());
}

void loop() {
  unsigned long currentTime = millis();

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  bool isRaining = readRainSensor();

  // C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë·ªãnh k·ª≥ (m·ªói 5 gi√¢y)
  if (currentTime - lastSerialDisplayTime >= serialDisplayInterval) {
    noInterrupts();
    // T√≠nh l∆∞·ª£ng m∆∞a (ch·ªâ n·∫øu c√≥ m∆∞a)
    float rainAmount = isRaining ? rainCount * rainPerTip_mm : 0;
    // T√≠nh t·ªëc ƒë·ªô gi√≥
    float windSpeed = (windCount * windCircumference_m) / (serialDisplayInterval / 1000.0);
    // Ki·ªÉm tra t√≠n hi·ªáu Hall
    if (rainCount == 0) rainAmount = 0;
    if (windCount == 0) windSpeed = 0;
    interrupts();

    // Hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n Serial
    Serial.printf("Nhi·ªát ƒë·ªô: %.2f ¬∞C\n", temperature);
    Serial.printf("ƒê·ªô ·∫©m: %.2f %%\n", humidity);
    Serial.printf("C√≥ m∆∞a: %s\n", isRaining ? "C√≥" : "Kh√¥ng");
    Serial.printf("L∆∞·ª£ng m∆∞a: %.2f mm\n", rainAmount);
    Serial.printf("T·ªëc ƒë·ªô gi√≥: %.2f m/s\n", windSpeed);
    Serial.println("---------------------------------------");

    // G·ª≠i d·ªØ li·ªáu l√™n server
    sendDataToServer(temperature, humidity, rainAmount, windSpeed);

    lastSerialDisplayTime = currentTime;
  }

  // C·∫≠p nh·∫≠t l∆∞·ª£ng m∆∞a v√† t·ªëc ƒë·ªô gi√≥ ƒë·ªãnh k·ª≥ (m·ªói 5 ph√∫t)
  if (currentTime - lastRainCalcTime >= rainInterval) {
    noInterrupts();
    // T√≠nh l∆∞·ª£ng m∆∞a (ch·ªâ n·∫øu c√≥ m∆∞a)
    float rainAmount = isRaining ? rainCount * rainPerTip_mm : 0;
    // T√≠nh t·ªëc ƒë·ªô gi√≥
    float windSpeed = (windCount * windCircumference_m) / (rainInterval / 1000.0);
    // Ki·ªÉm tra t√≠n hi·ªáu Hall
    if (rainCount == 0) rainAmount = 0;
    if (windCount == 0) windSpeed = 0;
    // Reset b·ªô ƒë·∫øm
    rainCount = 0;
    windCount = 0;
    interrupts();

    // Hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n Serial
    Serial.printf("üåßÔ∏è L∆∞·ª£ng m∆∞a: %.2f mm\n", rainAmount);
    Serial.printf("üí® T·ªëc ƒë·ªô gi√≥: %.2f m/s\n", windSpeed);
    Serial.printf("Nhi·ªát ƒë·ªô: %.2f ¬∞C\n", temperature);
    Serial.printf("ƒê·ªô ·∫©m: %.2f %%\n", humidity);
    Serial.printf("C√≥ m∆∞a: %s\n", isRaining ? "C√≥" : "Kh√¥ng");
    Serial.println("---------------------------------------");

    // G·ª≠i d·ªØ li·ªáu l√™n server
    sendDataToServer(temperature, humidity, rainAmount, windSpeed);

    lastRainCalcTime = currentTime;
  }
}