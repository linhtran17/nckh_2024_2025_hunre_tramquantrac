/***********************
 *  ESP32 WEATHER NODE
 *  - DHT22: nhi·ªát ƒë·ªô/ƒë·ªô ·∫©m (PIN_DHT)
 *  - Tipping bucket (m∆∞a) qua Hall: PIN_HALL_RAIN (interrupt)
 *  - Anemometer (gi√≥) qua Hall: PIN_HALL_WIND (interrupt)
 *  - Rain detector MH-RD (digital): PIN_RAIN_DETECTOR (l·ªçc nhi·ªÖu)
 *  - G·ª≠i HTTP POST (JSON m·∫£ng) t·ªõi /api/weather
 ***********************/
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <DHT.h>
#include <math.h>  // d√πng fabsf

/********** WiFi & Server **********/
const char* ssid      = "realme 9";
const char* password  = "12345689999"; // <-- ki·ªÉm tra l·∫°i cho ƒë√∫ng
const char* serverUrl = "http://10.140.6.159:3005/api/weather"; // <-- IP server Node
const int   stationId = 6;

/********** C·∫£m bi·∫øn **********/
#define PIN_DHT 4
#define DHTTYPE DHT22
DHT dht(PIN_DHT, DHTTYPE);

// Hall sensors & rain detector
#define PIN_HALL_RAIN     16
#define PIN_HALL_WIND     14
#define PIN_RAIN_DETECTOR 17

/********** H·∫±ng s·ªë hi·ªáu chu·∫©n **********/
const float rainPerTip_mm       = 2.73f;  // mm m·ªói nh·∫•p tipping bucket
const float windCircumference_m = 0.628f; // m/ v√≤ng quay c·ªëc gi√≥ (tu·ª≥ c·∫£m bi·∫øn)

/********** Bi·∫øn to√†n c·ª•c **********/
volatile unsigned long rainCount = 0; // t·ªïng s·ªë nh·∫•p m∆∞a t·ª´ l√∫c b·∫≠t
volatile unsigned long windCount = 0; // t·ªïng s·ªë v√≤ng gi√≥ t·ª´ l√∫c b·∫≠t

// snapshots ƒë·ªÉ t√≠nh delta theo kho·∫£ng th·ªùi gian
unsigned long rainCountPrev5s = 0;
unsigned long windCountPrev5s = 0;
unsigned long rainCountPrev5m = 0;
unsigned long windCountPrev5m = 0;

// nh·ªõ gi√° tr·ªã l·∫ßn cu·ªëi ƒë√£ g·ª≠i (ƒë·ªÉ ch·ªëng spam)
float lastTemperature = -999.0f;
float lastHumidity    = -999.0f;
float lastRainAmount  = -1.0f;
float lastWindSpeed   = -1.0f;

// th·ªùi gian
unsigned long last5sTime = 0;
unsigned long last5mTime = 0;
const unsigned long INTERVAL_5S = 5000;          // m·ªói 5 gi√¢y
const unsigned long INTERVAL_5M = 5UL * 60 * 1000; // m·ªói 5 ph√∫t

/********** Utilities **********/
bool readRainSensor() {
  // L·ªçc nhi·ªÖu cho MH-RD (LOW = c√≥ n∆∞·ªõc)
  const int numReadings = 5;
  int lowCount = 0;
  for (int i = 0; i < numReadings; i++) {
    if (digitalRead(PIN_RAIN_DETECTOR) == LOW) lowCount++;
    delay(10);
  }
  return (lowCount >= numReadings / 2);
}

void ensureWiFiConnected() {
  if (WiFi.status() == WL_CONNECTED) return;
  Serial.println("WiFi m·∫•t k·∫øt n·ªëi, ƒëang th·ª≠ l·∫°i...");
  WiFi.disconnect();
  WiFi.begin(ssid, password);
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi connected!");
    Serial.print("IP: "); Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi!");
  }
}

/********** Interrupt Service Routines **********/
void IRAM_ATTR onRainTip() {
  static unsigned long lastT = 0;
  unsigned long now = millis();
  if (now - lastT > 500) { // ch·ªëng bounce
    rainCount++;
    lastT = now;
  }
}

void IRAM_ATTR onWindSpin() {
  static unsigned long lastT = 0;
  unsigned long now = millis();
  if (now - lastT > 200) { // ch·ªëng bounce (gi√≥ quay nhanh h∆°n m∆∞a, gi·∫£m debounce)
    windCount++;
    lastT = now;
  }
}

/********** G·ª≠i d·ªØ li·ªáu **********/
void sendBatchToServer(float t, float h, float rain, float wind) {
  ensureWiFiConnected();
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ö†Ô∏è B·ªè qua g·ª≠i v√¨ WiFi ch∆∞a k·∫øt n·ªëi");
    return;
  }

  // thay th·∫ø NAN b·∫±ng last known ƒë·ªÉ tr√°nh g·ª≠i NaN
  if (isnan(t)) {
    Serial.println("L·ªói ƒë·ªçc nhi·ªát ƒë·ªô, d√πng gi√° tr·ªã tr∆∞·ªõc.");
    t = lastTemperature;
  }
  if (isnan(h)) {
    Serial.println("L·ªói ƒë·ªçc ƒë·ªô ·∫©m, d√πng gi√° tr·ªã tr∆∞·ªõc.");
    h = lastHumidity;
  }
  if (rain < 0) rain = 0;
  if (wind < 0) wind = 0;

  // Ng∆∞·ª°ng thay ƒë·ªïi ƒë·ªÉ tr√°nh spam
  bool firstSend = (lastTemperature == -999.0f || lastHumidity == -999.0f || lastRainAmount < 0 || lastWindSpeed < 0);
  bool changed =
    firstSend ||
    fabsf(t - lastTemperature) > 0.5f ||
    fabsf(h - lastHumidity)    > 1.0f ||
    fabsf(rain - lastRainAmount) > 0.1f ||
    fabsf(wind - lastWindSpeed)  > 0.1f;

  if (!changed) {
    Serial.println("‚è≠Ô∏è D·ªØ li·ªáu kh√¥ng thay ƒë·ªïi ƒë√°ng k·ªÉ ‚Üí kh√¥ng g·ª≠i.");
    return;
  }

  HTTPClient http;
  http.begin(serverUrl);
  http.addHeader("Content-Type", "application/json");

  // JSON m·∫£ng g·ªìm 4 object
  StaticJsonDocument<512> doc;
  JsonArray arr = doc.to<JsonArray>();

  JsonObject o1 = arr.createNestedObject();
  o1["station_id"]     = stationId;
  o1["parameter_type"] = "temperature";
  o1["value"]          = roundf(t * 100) / 100.0f;

  JsonObject o2 = arr.createNestedObject();
  o2["station_id"]     = stationId;
  o2["parameter_type"] = "humidity";
  o2["value"]          = roundf(h * 100) / 100.0f;

  JsonObject o3 = arr.createNestedObject();
  o3["station_id"]     = stationId;
  o3["parameter_type"] = "rainfall";
  o3["value"]          = roundf(rain * 100) / 100.0f;

  JsonObject o4 = arr.createNestedObject();
  o4["station_id"]     = stationId;
  o4["parameter_type"] = "wind";
  o4["value"]          = roundf(wind * 100) / 100.0f;

  String body;
  serializeJson(doc, body);
  Serial.println("üì§ POST " + String(serverUrl));
  Serial.println("Payload: " + body);

  int code = http.POST(body);
  if (code > 0) {
    Serial.printf("‚úÖ Server responded: %d\n", code);
    String resp = http.getString();
    Serial.println("Resp: " + resp);
    // c·∫≠p nh·∫≠t last*
    lastTemperature = t;
    lastHumidity    = h;
    lastRainAmount  = rain;
    lastWindSpeed   = wind;
  } else {
    Serial.printf("‚ùå POST failed: %s\n", http.errorToString(code).c_str());
  }
  http.end();
}

/********** Setup **********/
void setup() {
  Serial.begin(115200);

  // WiFi
  Serial.print("K·∫øt n·ªëi WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected!");
  Serial.print("IP: "); Serial.println(WiFi.localIP());

  // Sensors
  dht.begin();
  pinMode(PIN_RAIN_DETECTOR, INPUT);
  pinMode(PIN_HALL_RAIN, INPUT_PULLUP);
  pinMode(PIN_HALL_WIND, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(PIN_HALL_RAIN), onRainTip, FALLING);
  attachInterrupt(digitalPinToInterrupt(PIN_HALL_WIND), onWindSpin, FALLING);

  last5sTime = millis();
  last5mTime = millis();
}

/********** Loop **********/
void loop() {
  unsigned long now = millis();

  // --- M·ªói 5 gi√¢y: ƒë·ªçc v√† g·ª≠i t·ª©c th·ªùi ---
  if (now - last5sTime >= INTERVAL_5S) {
    // ƒë·ªçc DHT
    float t = dht.readTemperature(); // ¬∞C
    float h = dht.readHumidity();    // %

    bool raining = readRainSensor();

    // ch·ª•p s·ªë ƒë·∫øm hi·ªán t·∫°i (tr√°nh race)
    noInterrupts();
    unsigned long rNow = rainCount;
    unsigned long wNow = windCount;
    interrupts();

    // delta 5s
    unsigned long dRain5s = (rNow >= rainCountPrev5s) ? (rNow - rainCountPrev5s) : 0;
    unsigned long dWind5s = (wNow >= windCountPrev5s) ? (wNow - windCountPrev5s) : 0;

    // l∆∞·ª£ng m∆∞a trong 5s (n·∫øu c·∫£m bi·∫øn b√°o c√≥ m∆∞a)
    float rain5s = raining ? (dRain5s * rainPerTip_mm) : 0.0f;

    // t·ªëc ƒë·ªô gi√≥ t·ª©c th·ªùi (m/s) = qu√£ng ƒë∆∞·ªùng (m) / th·ªùi gian (s)
    float wind5s = (dWind5s * windCircumference_m) / (INTERVAL_5S / 1000.0f);

    // log
    Serial.printf("üå° %.2f ¬∞C | üíß %.2f %% | ‚òî %.2f mm/5s | üçÉ %.2f m/s\n",
                  t, h, rain5s, wind5s);

    // g·ª≠i
    sendBatchToServer(t, h, rain5s, wind5s);

    // c·∫≠p nh·∫≠t snapshot
    rainCountPrev5s = rNow;
    windCountPrev5s = wNow;
    last5sTime = now;
  }

  // --- M·ªói 5 ph√∫t: t·ªïng h·ª£p (tu·ª≥ b·∫°n d√πng hi·ªÉn th·ªã/ghi log) ---
  if (now - last5mTime >= INTERVAL_5M) {
    noInterrupts();
    unsigned long rNow = rainCount;
    unsigned long wNow = windCount;
    interrupts();

    unsigned long dRain5m = (rNow >= rainCountPrev5m) ? (rNow - rainCountPrev5m) : 0;
    unsigned long dWind5m = (wNow >= windCountPrev5m) ? (wNow - windCountPrev5m) : 0;

    float rain5mTotal = dRain5m * rainPerTip_mm; // mm/5 ph√∫t
    float wind5mAvg   = (dWind5m * windCircumference_m) / (INTERVAL_5M / 1000.0f); // m/s trung b√¨nh

    Serial.printf("‚è±Ô∏è 5m total: ‚òî %.2f mm | üçÉ avg %.2f m/s\n", rain5mTotal, wind5mAvg);

    // (kh√¥ng b·∫Øt bu·ªôc g·ª≠i l·∫ßn n·ªØa ƒë·ªÉ tr√°nh spam ‚Äî tu·ª≥ nhu c·∫ßu)
    // sendBatchToServer(lastTemperature, lastHumidity, rain5mTotal, wind5mAvg);

    rainCountPrev5m = rNow;
    windCountPrev5m = wNow;
    last5mTime = now;
  }
}
